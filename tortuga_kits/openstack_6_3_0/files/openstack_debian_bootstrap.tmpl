#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import sys
import subprocess
import urllib2
import platform
import time
import base64
import json
import ssl
import socket


### SETTINGS


def runCommand(cmd, retries=1, env=None):
    for nRetry in range(retries):
        p = subprocess.Popen(cmd, shell=True, env=env)

        retval = p.wait()
        if retval == 0:
            break

        time.sleep(5 + 2 ** (nRetry * 0.75))
    else:
        return -1

    return retval


def _installPackage(pkgList, retries=10):
    cmd = 'apt-get install -y %s' % pkgList

    retval = runCommand(cmd, retries, env={
        'DEBIAN_FRONTEND': 'noninteractive',
        'PATH': '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
     })
    if retval != 0:
        raise Exception('Error installing package [%s]' % (pkgList))


def installPuppet():
    pkgname = 'puppetlabs-release-pc1'

    p = subprocess.Popen('lsb_release -cc|awk "{print \$2}"', shell=True,
                         stdout=subprocess.PIPE)

    stdout, _ = p.communicate()

    codename = stdout.rstrip()

    filename = '{0}-{1}.deb'.format(pkgname, codename)
    url = 'http://apt.puppetlabs.com/{0}'.format(filename)

    retval = runCommand('wget -O {0} {1}'.format(os.path.join('/tmp', filename), url))
    if retval != 0:
        sys.stderr.write(
            'Error: unable to install package \"{0}\"\n'.format(pkgname))

        sys.exit(1)

    retval = runCommand('dpkg -i {0}'.format(os.path.join('/tmp', filename)))
    if retval != 0:
        sys.stderr.write('Error: dpkg failed (rc=%d)\n' % (retval))
        sys.exit(1)

    # Attempt to install puppet
    runCommand('apt-get update', env={'DEBIAN_FRONTEND': 'noninteractive'})

    _installPackage('puppet-agent')


def get_fqdn():
    url = 'https://%s:%s/v1/identify-node' % (installerIpAddress, port)

    ctx = ssl.create_default_context()
    ctx.check_hostname = False
    ctx.verify_mode = ssl.CERT_NONE

    req = urllib2.Request(url)

    req.add_header(
        'Authorization',
        'Basic ' + base64.standard_b64encode(
            '%s:%s' % (cfmUser, cfmPassword)))

    response = None

    for nCount in range(5):
        try:
            response = urllib2.urlopen(req, context=ctx)
            break
        except urllib2.URLError as ex:
            sys.stderr.write('Error connecting to web service: {0}\n'.format(str(ex)))
            break
        except urllib2.HTTPError as ex:
            if ex.code == 401:
                raise Exception(
                    'Invalid Tortuga webservice credentials')
            elif ex.code == 404:
                # Unrecoverable
                raise Exception(
                    'URI not found; invalid Tortuga webservice'
                    ' configuration')

            time.sleep(2 ** (nCount + 1))
    else:
        raise Exception('Unable to communicate with Tortuga webservice')

    if not response:
       raise Exception('Unable to communciate with Tortuga webservice')

    d = json.load(response)

    if response.code != 200:
        if 'error' in d:
            errmsg = 'Tortuga webservice error: msg=[%s]' % (
                d['error']['message'])
        else:
            errmsg = 'Tortuga webservice internal error'

        raise Exception(errmsg)

    return d['node']['name']


def setHostName(h):
    runCommand('hostname %s' % (h))

    with open('/etc/hostname', 'w') as fp:
        fp.write(h)

    return h


def updateResolver(domainName):
    with open('/etc/resolv.conf', 'w') as fp:
        if domainName:
            fp.write('search %s\n' % (domainName))

        fp.write('nameserver %s\n' % (installerIpAddress))


def bootstrapPuppet():
    with open('/etc/hosts', 'a+') as fp:
        fp.write('%s\t%s\n' % (installerIpAddress, installerHostName))

    cmd = ('/opt/puppetlabs/bin/puppet agent'
           ' --logdest /tmp/puppet_bootstrap.log'
           ' --no-daemonize --onetime --server %s'
           ' --waitforcert 120' % (installerHostName))

    runCommand(cmd)


def main():
    vals = platform.dist()

    vers = vals[1].split('.')[0]

    fqdn = get_fqdn()

    domainName = None
    if '.' in fqdn:
        domainName = fqdn.split('.', 1)[1]

    if domainName:
        updateResolver(domainName)

    installPuppet()

    bootstrapPuppet()


if __name__ == '__main__':
    main()
